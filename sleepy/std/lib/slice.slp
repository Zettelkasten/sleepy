# Simple Long slices

struct Unbounded { }
struct Slice {
  from : Long|Unbounded; to : Long|Unbounded;
}
func SliceFromTo(from: Long, to: Long) -> Slice { return Slice(from, to); }  # list[x:y]
# Use SliceFromTo as workaround for not being able to overload Slice(Int, Int)
func SliceFromTo(from: Int, to: Int) -> Slice { return SliceFromTo(ToLong(from), ToLong(to)); }
func SliceFrom(from: Long) -> Slice { return Slice(from, Unbounded()); }     # list[x:]
func SliceFrom(from: Int) -> Slice { return SliceFrom(ToLong(from)); }
func SliceTo(to: Long) -> Slice { return Slice(Unbounded(), to); }           # list[:x]
func SliceTo(to: Int) -> Slice { return SliceTo(ToLong(to)); }
func SliceAll() -> Slice { return Slice(Unbounded(), Unbounded()); }         # list[:]

func normalized_index(index: Long, length: Long) -> Long {
  if index < 0l { index += length; }
  assert(and(0l <= index, index < length));
  return index;
}
func normalized_from_index(slice: Slice, length: Long) -> Long {
  index = slice.from;
  if index is Unbounded { index = 0l; }
  if index < 0l { index += length; }
  assert(and(0l <= index, index <= length));
  return index;
}
func normalized_to_index(slice: Slice, length: Long) -> Long {
  index = slice.to;
  if index is Unbounded { index = length; }
  if index < 0l { index += length; }
  assert(and(0l <= index, index <= length));
  return index;
}
