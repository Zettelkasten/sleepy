## Output
func print(Char char) { extern_func print_char(Char char); print_char(char); }
func print(Double double) { extern_func print_double(Double d); print_double(double); }
func print(Float float) { extern_func print_float(Float f); print_float(float); }
func print(Int int) { extern_func print_int(Int i); print_int(int); }
func print(Long long) { extern_func print_long(Long l); print_long(long); }
@Inline func print(Bool bool) { if bool { print('T'); } else { print('F'); } }
@Inline func print_line() { print('\n'); }
@Inline func print_line(Char|Double|Float|Int|Long|Bool line) { print(line); print_line(); }
extern_func flush();
@Inline func print_flush(Char|Double|Float|Int|Long|Bool text) { print(text); flush(); }
@Inline func print_line_flush(Char|Double|Float|Int|Long|Bool line) { print_line(line); flush(); }

## Allocation
extern_func allocate_double(Int size) -> DoublePtr;
extern_func allocate_float(Int size) -> FloatPtr;
extern_func allocate_char(Int size) -> CharPtr;
extern_func allocate_int(Int size) -> IntPtr;
extern_func allocate_long(Int size) -> LongPtr;
func NullDoublePtr() -> DoublePtr { extern_func double_null_ptr() -> DoublePtr; return double_null_ptr(); }
func NullFloatPtr() -> DoublePtr { extern_func float_null_ptr() -> DoublePtr; return float_null_ptr(); }
func NullCharPtr() -> CharPtr { extern_func char_null_ptr() -> CharPtr; return char_null_ptr(); }
func NullIntPtr() -> IntPtr { extern_func int_null_ptr() -> IntPtr; return int_null_ptr(); }
func NullLongPtr() -> LongPtr { extern_func long_null_ptr() -> LongPtr; return long_null_ptr(); }
func deallocate(DoublePtr ptr) { extern_func deallocate_double(DoublePtr ptr); deallocate_double(ptr); }
func deallocate(FloatPtr ptr) { extern_func deallocate_float(FloatPtr ptr); deallocate_float(ptr); }
func deallocate(CharPtr ptr) { extern_func deallocate_char(CharPtr ptr); deallocate_char(ptr); }
func deallocate(IntPtr ptr) { extern_func deallocate_int(IntPtr ptr); deallocate_int(ptr); }
func deallocate(LongPtr ptr) { extern_func deallocate_long(LongPtr ptr); deallocate_long(ptr); }
func load(DoublePtr ptr) -> Double { extern_func load_double(DoublePtr ptr) -> Double; return load_double(ptr); }
func load(FloatPtr ptr) -> Float { extern_func load_float(FloatPtr ptr) -> Float; return load_float(ptr); }
func load(CharPtr ptr) -> Char { extern_func load_char(CharPtr ptr) -> Char; return load_char(ptr); }
func load(IntPtr ptr) -> Int { extern_func load_int(IntPtr ptr) -> Int; return load_int(ptr); }
func load(LongPtr ptr) -> Long { extern_func load_long(LongPtr ptr) -> Long; return load_long(ptr); }
func store(DoublePtr ptr, Double value) { extern_func store_double(DoublePtr ptr, Double value); store_double(ptr, value); }
func store(FloatPtr ptr, Float value) { extern_func store_float(FloatPtr ptr, Float value); store_float(ptr, value); }
func store(CharPtr ptr, Char value) { extern_func store_char(CharPtr ptr, Char value); store_char(ptr, value); }
func store(IntPtr ptr, Int value) { extern_func store_int(IntPtr ptr, Int value); store_int(ptr, value); }
func store(LongPtr ptr, Long value) { extern_func store_long(LongPtr ptr, Long value); store_long(ptr, value); }
extern_func assert(Bool condition);
@Inline func unchecked_assert(Bool condition) { }
func memcpy(DoublePtr to, DoublePtr from, Int size) {
  extern_func memcpy_double(DoublePtr to, DoublePtr from, Int size);
  memcpy_double(to, from, size);
}
func memcpy(FloatPtr to, FloatPtr from, Int size) {
  extern_func memcpy_float(FloatPtr to, FloatPtr from, Int size);
  memcpy_float(to, from, size);
}
func memcpy(CharPtr to, CharPtr from, Int size) {
  extern_func memcpy_char(CharPtr to, CharPtr from, Int size);
  memcpy_char(to, from, size);
}
func memcpy(IntPtr to, IntPtr from, Int size) {
  extern_func memcpy_int(IntPtr to, IntPtr from, Int size);
  memcpy_int(to, from, size);
}

## Boolean Logic
@Inline func True() -> Bool { return 0 == 0; }
@Inline func False() -> Bool { return 0 != 0; }
@Inline func or(Bool a, Bool b) -> Bool { if a { return a; } else { return b; } }
@Inline func or(Bool a, Bool b, Bool c) -> Bool { return or(or(a, b), c); }
@Inline func and(Bool a, Bool b) -> Bool { if a { return b; } else { return False(); } }
@Inline func and(Bool a, Bool b, Bool c) -> Bool { return and(and(a, b), c); }
@Inline func not(Bool a) -> Bool { if (a) { return False(); } else { return True(); } }

## Conversions
func ToInt(Double d) -> Int { extern_func double_to_int(Double d) -> Int; return double_to_int(d); }
func ToInt(Bool b) -> Int { if b { return 1; } else { return 0; } }
func ToInt(Long l) -> Int { extern_func long_to_int(Long l) -> Int; return long_to_int(l); }
func ToLong(Int i) -> Long { extern_func int_to_long(Int i) -> Long; return int_to_long(i); }
func ToLong(CharPtr ptr) -> Long { extern_func char_ptr_to_long(CharPtr ptr) -> Long; return char_ptr_to_long(ptr); }
func ToLong(FloatPtr ptr) -> Long { extern_func float_ptr_to_long(FloatPtr ptr) -> Long; return float_ptr_to_long(ptr); }
func ToDouble(Int i) -> Double { extern_func int_to_double(Int i) -> Double; return int_to_double(i); }
func ToBool(Int i) -> Bool { if i == 0 { return False(); } else { if i != 1 { assert(False()); } return True(); }}

## Simple Math
func <(Int left, Double right) -> Bool { return ToDouble(left) < right; }
func <(Double left, Int right) -> Bool { return left < ToDouble(right); }
func <=(Int left, Double right) -> Bool { return ToDouble(left) <= right; }
func <=(Double left, Int right) -> Bool { return left <= ToDouble(right); }
func >(Int left, Double right) -> Bool { return ToDouble(left) > right; }
func >(Double left, Int right) -> Bool { return left > ToDouble(right); }
func >=(Int left, Double right) -> Bool { return ToDouble(left) >= right; }
func >=(Double left, Int right) -> Bool { return left >= ToDouble(right); }
@Inline func min(Int a, Int b) -> Int { if a < b { return a; } else { return b; } }
@Inline func max(Int a, Int b) -> Int { if a > b { return a; } else { return b; } }
@Inline func sign(Int a) -> Int { if a > 0 { return 1; } if a == 0 { return 0; } else { return -1; } }
@Inline func sign(Double a) -> Double { if a > 0.0 { return 1.0; } if a == 0.0 { return 0.0; } else { return -1.0; } }
@Inline func div(Int a, Int b) -> Int { return a / b; }
@Inline func mod(Int a, Int b) -> Int { return a - div(a, b) * b; }
extern_func sin(Double x) -> Double;
extern_func cos(Double x) -> Double;
@Inline func sin(Float x) -> Float { extern_func sinf(Float f) -> Float; return sinf(x); }
@Inline func cos(Float x) -> Float { extern_func cosf(Float f) -> Float; return cosf(x); }

## String (note: the Str struct itself is declared internally, not here.)
# @RefType struct Str {
#   CharPtr start = allocate_char(8);
#   Int length = 0;
#   Int alloc_length = 8;
# }
func EmptyStr(Int alloc_length) -> @Mutable Str {
  return Str(allocate_char(alloc_length), 0, alloc_length);
}
func EmptyStr() -> @Mutable Str {
  return EmptyStr(8);
}
func resize(@Mutable Str str, Int new_alloc_length) {
  new_start = allocate_char(new_alloc_length);
  memcpy(new_start, str.start, str.alloc_length);
  deallocate(str.start);
  str.alloc_length = new_alloc_length;
  str.start = new_start;
}
func copy(Str str) -> @Mutable Str {
  @Mutable new = Str(allocate_char(str.alloc_length), str.length, str.alloc_length);
  memcpy(new.start, str.start, str.length);
  return new;
}
func get(Str str, Int pos) -> CharPtr {
  return str.start + pos;
}
func set(@Mutable Str str, Int pos, Char char) {
  assert(and(0 <= pos, pos < str.length + 1));
  if pos >= str.alloc_length {
    resize(str, max(2 * str.alloc_length, 1));
  }
  store(str.start + pos, char);
  if pos == str.length {
    str.length += 1;
  }
}
func =(CharPtr ptr, Char v) { store(ptr, v); }
func +(CharPtr ptr) -> Char { return load(ptr); }
func =(DoublePtr ptr, Double d) { store(ptr, d); }
func +(DoublePtr ptr) -> Double { return load(ptr); }

func insert(@Mutable Str str, Char char, Int pos) {
  assert(and(0 <= pos, pos < str.length + 1));
  if str.length + 1 >= str.alloc_length {
    resize(str, max(2 * str.alloc_length, 1));
  }
  memcpy(str.start + pos + 1, str.start + pos, str.length - pos);
  set(str, pos, char);
}
func insert(@Mutable Str str, Char insert_char) { insert(str, insert_char, str.length); }
func insert(@Mutable Str str, Str insert_str, Int pos) {
  assert(and(0 <= pos, pos < str.length + 1));
  if str.length + insert_str.length >= str.alloc_length {
    resize(str, max(2 * str.alloc_length, str.length + insert_str.length));
  }
  memcpy(str.start + pos + insert_str.length, str.start + pos, str.length - pos);
  memcpy(str.start + pos, insert_str.start, insert_str.length);
  str.length += insert_str.length;
}
func insert(@Mutable Str str, Str insert_str) { insert(str, insert_str, str.length); }
func ToStr(Char from_char) -> @Mutable Str {
  @Mutable str = EmptyStr();
  insert(str, from_char);
  return str;
}
func +(Str a, Str b) -> @Mutable Str {
  @Mutable res = EmptyStr(a.length + b.length);
  memcpy(res.start, a.start, a.length);
  memcpy(res.start + a.length, b.start, b.length);
  res.length = a.length + b.length;
  return res;
}
func +(Str a, Char b) -> @Mutable Str {
  @Mutable res = copy(a);
  insert(res, b);
  return res;
}
func +(Char a, Str b) -> @Mutable Str {
  a_ = ToStr(a);
  @Mutable res = a_ + b;
  free(a_);
  return res;
}
func +(Char a, Char b) -> @Mutable Str {
  @Mutable res = ToStr(a);
  insert(res, b);
  return res;
}
func *(Str str, Int repetitions) -> @Mutable Str {
  @Mutable res = EmptyStr(str.length * repetitions);
  while repetitions > 0 {
    memcpy(res.start + res.length, str.start, str.length);
    res.length += str.length;
    repetitions -= 1;
  }
  return res;
}
func *(Char c, Int repetitions) -> @Mutable Str {
  c_ = ToStr(c);
  @Mutable res = c_ * repetitions;
  free(c_);
  return res;
}
func print(Str str) {
  pos = 0;
  while pos < str.length {
    print(+str[pos]);
    pos += 1;
  }
}
func print_line(Str str) {
  print(str); print_line();
}
func assert(Bool cond, Str error) {
  if not(cond) {
    print_line("Assertion failed!");
    print_line(error);
    extern_func exit(Int exit_code);
    exit(1);
  }
}

## Misc
func set_random_seed(Int seed) {
  extern_func srand(Int seed);
  srand(seed);
}
func random(Double min, Double max) -> Double {
  assert(min < max);
  extern_func random_double() -> Double;
  rnd = random_double();  # in [0, 1]
  return (1.0 - rnd) * min + rnd * max;  # in [min, max]
}
func random_int(Int min, Int max) -> Int {
  return ToInt(random(ToDouble(min), ToDouble(max)));
}
