## Output
func print(Char char) { extern_func print_char(Char char); print_char(char); }
func print(Double double) { extern_func print_double(Double d); print_double(double); }
func print(Int int) { extern_func print_int(Int i); print_int(int); }
@Inline func print(Bool bool) { if bool { print('T'); } else { print('F'); } }
@Inline func print_line() { print('\n'); }
@Inline func print_line(Char|Double|Int|Bool line) { print(line); print_line(); }
extern_func flush();
@Inline func print_flush(Char|Double|Int|Bool text) { print(text); flush(); }
@Inline func print_line_flush(Char|Double|Int|Bool line) { print_line(line); flush(); }

## Allocation
extern_func allocate_double(Int size) -> DoublePtr;
extern_func allocate_char(Int size) -> CharPtr;
func deallocate(DoublePtr ptr) { extern_func deallocate_double(DoublePtr ptr); deallocate_double(ptr); }
func deallocate(CharPtr ptr) { extern_func deallocate_char(CharPtr ptr); deallocate_char(ptr); }
func load(DoublePtr ptr) -> Double { extern_func load_double(DoublePtr ptr) -> Double; return load_double(ptr); }
func load(CharPtr ptr) -> Char { extern_func load_char(CharPtr ptr) -> Char; return load_char(ptr); }
func store(DoublePtr ptr, Double value) { extern_func store_double(DoublePtr ptr, Double value); store_double(ptr, value); }
func store(CharPtr ptr, Char value) { extern_func store_char(CharPtr ptr, Char value); store_char(ptr, value); }
extern_func assert(Bool condition);

## Boolean Logic
@Inline func True() -> Bool { return 0 == 0; }
@Inline func False() -> Bool { return 0 != 0; }
@Inline func or(Bool a, Bool b) -> Bool { if a { return a; } else { return b; } }
@Inline func or(Bool a, Bool b, Bool c) -> Bool { return or(or(a, b), c); }
@Inline func and(Bool a, Bool b) -> Bool { if a { return b; } else { return False(); } }
@Inline func and(Bool a, Bool b, Bool c) -> Bool { return and(and(a, b), c); }
@Inline func not(Bool a) -> Bool { if (a) { return False(); } else { return True(); } }

## Simple Math
@Inline func min(Int a, Int b) -> Int { if a < b { return a; } else { return b; } }
@Inline func max(Int a, Int b) -> Int { if a > b { return a; } else { return b; } }

## String
@RefType struct Str {
  CharPtr start = allocate_char(8);
  Int length = 0;
  Int alloc_length = 8;
}
func EmptyStr(Int alloc_length) -> @Mutable Str {
  return Str(allocate_char(alloc_length), 0, alloc_length);
}
func EmptyStr() -> @Mutable Str {
  return EmptyStr(8);
}
func get(Str str, Int pos) -> Char {
  return load(str.start + pos);
}
func set(@Mutable Str str, Int pos, Char char) {
  assert(and(0 <= pos, pos < str.length + 1));
  if pos >= str.alloc_length {  # no space left, resize
    extern_func memcpy(CharPtr to, CharPtr from, Int size);  # size is actually a Long
    new_alloc_length = max(2 * str.alloc_length, 1);
    new_start = allocate_char(new_alloc_length);
    memcpy(new_start, str.start, str.alloc_length * 8);
    deallocate(str.start);
    str.alloc_length = new_alloc_length;
    str.start = new_start;
  }
  store(str.start + pos, char);
  if pos == str.length {
    str.length += 1;
  }
}
func +(Str a, Str b) -> @Mutable Str {
  @Mutable Str res = EmptyStr(a.length + b.length);
  extern_func memcpy(CharPtr to, CharPtr from, Int size);  # size is actually a Long
  memcpy(res.start, a.start, a.length);
  memcpy(res.start + a.length, b.start, b.length);
  return res;
}
func print(Str str) {
  pos = 0;
  while pos < str.length {
    print(get(str, pos));
    pos += 1;
  }
}
func print_line(Str str) {
  print(str); print_line();
}
