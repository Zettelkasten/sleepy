extern_func null() -> Ptr[Double];

@RefType
struct For_impl {
    begin: Int = 0;
    end: Int = 0;
    index: Int = 0;
}

@RefType
struct For {
    it: For_impl = For_impl(0, 0, 0);
}

func +(f: For) -> Int {
    return f.it.index;
}

func run(f: For) -> Bool {
    f.it.begin += 1;
    f.it.index += 1;
    not_done = f.it.begin <= f.it.end;

    if(not(not_done)) {
        free(f);
    }

    return not_done;
}

func for(begin: Int, end: Int) -> For {
    return For(For_impl(begin, end, begin - 1));
}

struct DPtr {
    ptr: Ptr[Double] = null();
}

func =(dptr: DPtr, d: Double) {
    store(dptr.ptr, d);
}

func +(dptr: DPtr) -> Double {
    return load(dptr.ptr);
}

struct Matrix {
    dim: Int = 0;
    data: Ptr[Double] = null();
}

func at(m: Matrix, i: Int, j: Int) -> DPtr {
    return DPtr(m.data + (i * m.dim) + j);
}

func Matrix_c(dim: Int) -> Matrix {
    return Matrix(dim, allocate_double(dim * dim));
}

# Put heat sources in first row at the beginning and in last row at the end
func make_heat_sources(m: Matrix) {


    ind = for(0, min(100, m.dim));
    while(run(ind)) {
        at(m, 0, +ind) = 50.0;
    }


    ind = for(max(0, m.dim - 100), m.dim);
    while(run(ind)) {
        at(m, m.dim - 1, +ind) = 50.0;
    }
}

func relaxation(current: Matrix, next: Matrix) {

    #print_line("relax");

    col = for(1, current.dim - 1);
    while(run(col)) {

        row = for(1, current.dim - 1);
        while(run(row)) {

            #print(+row);
            #print(" ");
            #print(+col);

            #print(" = ");
            #print_line(+at(current, +row, +col));

            at(next, +row, +col) = (+at(current, +row, +col + 1) +
                +at(current, +row, +col - 1) +
                +at(current, +row + 1, +col) +
                +at(current, +row - 1, +col)) / 4.0;

            #print_line(+ptr);
            #print_line(+at(next, +row, +col));
            #print_line("");
        }
    }
}

func print_ppm(mat: Matrix) {
    print_line("P2");

    print(mat.dim);
    print(" ");
    print(mat.dim);
    print("\n");

    print_line(255);

    row = for(0, mat.dim);
    while(run(row)) {

        col = for(0, mat.dim);
        while(run(col)) {
            print( min(ToInt(+at(mat, +row, +col) * 255.0), 255) );
            print(" ");
        }
        print("\n");
    }

}

func main() {
    dim = 500;
    current: Matrix = Matrix_c(dim + 2);
    next: Matrix = Matrix_c(dim + 2);

    make_heat_sources(current);
    make_heat_sources(next);


    ind = for(0, 500);
    while(run(ind)) {
        relaxation(current, next);
        tmp = current;
        current = next;
        next = tmp;

        at(current, 200, 300) = 100.0;
    }

    print_ppm(current);
}



