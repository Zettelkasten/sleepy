# OpenGL bindings via GLFW for sleepy.
# Compile using
# sleepy opengl.slp --compile-libs GL GLU glfw3 X11 Xxf86vm Xrandr pthread Xi dl m


### Vector / Matrix functions ###
# Fixed size vector implementation
@RefType struct Vector[T] {
  size: Int;
  start: Ptr[T];
}
func get[T](vec: Vector[T], pos: Int) -> Ptr[T] {
  assert(and(0 <= pos, pos < vec.size));
  return vec.start + pos;
}

func fill[T](vec: Vector[T], val: T) {
  pos = 0;
  while pos < vec.size {
    vec[pos] = val;
    pos += 1;
  }
}
func ZeroVector[T](size: Int) -> Vector[T] {
  v = Vector(size, allocate[T](size));
  fill(v, 0.0f);
  return v;
}
func Vector3(x: Float, y: Float, z: Float) -> Vector[Float] {
  vec = ZeroVector[Float](3);
  vec[0] = x; vec[1] = y; vec[2] = z;
  return vec;
}
func print[T](vec: Vector[T]) {
  print('[');
  pos = 0;
  while pos < vec.size {
    print(+vec[pos]);
    pos += 1;
    if pos < vec.size { print(','); print(' '); }
  }
  print(']');
}
@RefType struct Matrix {
  dim_x: Int = 0; dim_y: Int = 0;
  start: Ptr[Float] = allocate[Float](0);
}
func get(mat: Matrix, x: Int, y: Int) -> Ptr[Float] {
  assert(and(0 <= x, x < mat.dim_x));
  assert(and(0 <= y, y < mat.dim_y));
  return mat.start + x * mat.dim_x + y;
}
func set(mat: Matrix, x: Int, y: Int, val: Float) {
  assert(and(0 <= x, x < mat.dim_x));
  assert(and(0 <= y, y < mat.dim_y));
  store(mat.start + x * mat.dim_x + y, val);
}
func fill(mat: Matrix, val: Float) {
  x = 0;
  while x < mat.dim_x {
    y = 0;
    while y < mat.dim_y {
      mat[x, y] = val;
      y += 1;
    }
    x += 1;
  }
}
func ZeroMatrix(xs: Int, ys: Int) -> Matrix {
  m = Matrix(xs, ys, allocate[Float](xs * ys));
  fill(m, 0.0f);
  return m;
}
func IdentityMatrix(dim: Int) -> Matrix {
  mat = ZeroMatrix(dim, dim);
  pos = 0;
  while pos < dim {
    mat[pos, pos] = 1.0f;
    pos += 1;
  }
  return mat;
}
func ScaleMatrix[T](scale: Vector[T]) -> Matrix {
  mat = ZeroMatrix(scale.size + 1, scale.size + 1);
  pos = 0;
  while pos < scale.size {
    store(mat[pos, pos], +scale[pos]);
    pos += 1;
  }
  mat[scale.size, scale.size] = 1.0f;
  return mat;
}
func TranslateMatrix[T](translation: Vector[T]) -> Matrix {
  mat = ZeroMatrix(translation.size + 1, translation.size + 1);
  pos = 0;
  while pos < translation.size {
    mat[pos, pos] = 1.0f;
    mat[pos, translation.size] = +translation[pos];
    pos += 1;
  }
  store(mat[translation.size, translation.size], 1.0f);
  return mat;
}

func print(mat: Matrix) {
  print('[');
  x = 0;
  while x < mat.dim_x {
    y = 0;
    print('[');
    while y < mat.dim_y {
      print(+mat[x, y]);
      y += 1;
      if y < mat.dim_y { print(' '); }
    }
    print(']');
    x += 1;
    if x < mat.dim_x { print(' '); }
  }
  print(']');
}
func dot(left: Matrix, right: Matrix) -> Matrix {
  assert(left.dim_x == right.dim_y);
  new: Matrix = ZeroMatrix(left.dim_y, right.dim_x);
  x = 0;
  while x < new.dim_x {
    y = 0;
    while y < new.dim_y {
      new_entry = 0.0f;
      i = 0;
      while i < left.dim_x {
        new_entry += +left[i, x] * +right[y, i];
        i += 1;
      }
      new[x, y] = new_entry;
      y += 1;
    }
    x += 1;
  }
  return new;
}

### Reading Files ###
func read_file(file_name: Str) -> Str {
  struct File { ptr: Ptr[Int] = NullPtr[Int](); }
  struct SeekOrigin { val: Int = 0; }
  func SeekBeginning() -> SeekOrigin { return SeekOrigin(0); }
  func SeekCurrent() -> SeekOrigin { return SeekOrigin(1); }
  func SeekEnd() -> SeekOrigin { return SeekOrigin(2); }
  extern_func fopen(file_name: Ptr[Char], mode: Ptr[Char]) -> File;
  extern_func fseek(stream: File, offset: Long, origin: SeekOrigin) -> Int;
  extern_func ftell(stream: File) -> Long;
  extern_func rewind(stream: File);
  extern_func fread(buffer: Ptr[Char], size: Long, count: Long, stream: File) -> Long;
  extern_func fclose(stream: File) -> Int;

  file_name += '\0';
  mode = "rb\0";

  file = fopen(file_name.start, mode.start);
  if file.ptr == NullPtr[Int]() {
    assert(False(), "Cannot open: " + file_name);
  }
  fseek(file, 0l, SeekEnd());    # go to end of file
  file_size: Long = ftell(file);  # get position (= size: file)
  rewind(file);                  # go back to front
  if ToLong(ToInt(file_size)) != file_size {
    assert(False(), "File too big: " + file_name);
  }

  file_content = EmptyStr(ToInt(file_size));
  fread(file_content.start, file_size, 1l, file);  # read file content
  file_content.length = ToInt(file_size);

  if fclose(file) != 0 {
    assert(False(), "Cannot close: " + file_name);
  }
  free(file_name);  free(mode);
  return file_content;
}


### GLFW Functions ###
extern_func glfwInit() -> Int;
extern_func glfwTerminate() -> Int;

struct GLFWMonitor { ptr: Ptr[Char] = NullPtr[Char](); }
@Inline func NullGLFWMonitor() -> GLFWMonitor { return GLFWMonitor(NullPtr[Char]()); }

struct GLFWWindow { ptr: Ptr[Char] = NullPtr[Char](); }
@Inline func NullGLFWWindow() -> GLFWWindow { return GLFWWindow(NullPtr[Char]()); }
@Inline func ==(a: GLFWWindow, b: GLFWWindow) -> Bool { return a.ptr == b.ptr; }

extern_func glfwCreateWindow(width: Int, height: Int, title: Ptr[Char], monitor: GLFWMonitor, share: GLFWWindow) -> GLFWWindow;
extern_func glfwGetPrimaryMonitor() -> GLFWMonitor;
func destroy(window: GLFWWindow) {
  extern_func glfwDestroyWindow(window: GLFWWindow);
  glfwDestroyWindow(window);
}
func make_current_context(window: GLFWWindow) {
  extern_func glfwMakeContextCurrent(window: GLFWWindow);
  glfwMakeContextCurrent(window);
}
func should_close(window: GLFWWindow) -> Bool {
  extern_func glfwWindowShouldClose(window: GLFWWindow) -> Int;
  return glfwWindowShouldClose(window) == 1;
}
func swap_buffers(window: GLFWWindow) {
  extern_func glfwSwapBuffers(window: GLFWWindow);
  glfwSwapBuffers(window);
}

struct GLFWInputMode { val: Int = 0x0; }
func GLFWStickyKeys() -> GLFWInputMode { return GLFWInputMode(0x00033002); }
func set_sticky_keys(window: GLFWWindow, enable: Bool) {
  extern_func glfwSetInputMode(window: GLFWWindow, mode: GLFWInputMode, value: Int);
  glfwSetInputMode(window, GLFWStickyKeys(), ToInt(enable));
}
extern_func glfwPollEvents();
struct Key { code: Int = 0; }
func EscapeKey() -> Key { return Key(256); }
struct GLFWKeyState { val: Int = 0; }
func KeyRelease() -> GLFWKeyState { return GLFWKeyState(0); }
func KeyPress() -> GLFWKeyState { return GLFWKeyState(1); }
func KeyRepeat() -> GLFWKeyState { return GLFWKeyState(2); }
func ==(a: GLFWKeyState, b: GLFWKeyState) -> Bool { return a.val == b.val; }
extern_func glfwGetKey(window: GLFWWindow, key: Key) -> GLFWKeyState;

struct WindowHintTarget { val: Int = 0; }
func SamplesWindowHint() -> WindowHintTarget { return WindowHintTarget(0x0002100D); }
extern_func glfwWindowHint(target: WindowHintTarget, hint: Int);
func set_samples(num_samples: Int) {
  glfwWindowHint(SamplesWindowHint(), num_samples);
}

### GL Functions ###
extern_func glClearColor(red: Float, green: Float, blue: Float, alpha: Float);
struct ClearMask { bits: Int = 0x0; }
func ColorBufferBit() -> ClearMask { return ClearMask(0x00004000); }
func DepthBufferBit() -> ClearMask { return ClearMask(0x00000100); }
func or(a: ClearMask, b: ClearMask) -> ClearMask {
  return ClearMask(bitwise_or(a.bits, b.bits));
}

func clear(clear_mask: ClearMask) {
  extern_func glClear(clear_mask: Int);
  glClear(clear_mask.bits);
}

struct VertexArray { id: Int = 0; }
func generate_vertex_array() -> VertexArray {
  extern_func glGenVertexArrays(n: Int, arrays: Ptr[Int]);
  # as there is no reference operator yet, temporarily allocate some memory to obtain the id.
  tmp_ptr = allocate[Int](1);
  glGenVertexArrays(1, tmp_ptr);
  arr = VertexArray(load(tmp_ptr));
  deallocate(tmp_ptr);
  return arr;
}
func bind(arr: VertexArray) {
  extern_func glBindVertexArray(array: VertexArray);
  glBindVertexArray(arr);
}

struct Buffer { id: Int = 0; }
func generate_buffer() -> Buffer {
  extern_func glGenBuffers(n: Int, buffers: Ptr[Int]);
  # as there is no reference operator yet, temporarily allocate some memory to obtain the id.
  tmp_ptr = allocate[Int](1);
  glGenBuffers(1, tmp_ptr);
  buffer = Buffer(load(tmp_ptr));
  deallocate(tmp_ptr);
  return buffer;
}
struct BufferTarget { val: Int = 0; }
func ArrayBufferTarget() -> BufferTarget { return BufferTarget(0x8892); }
func bind(target: BufferTarget, buffer: Buffer) {
  extern_func glBindBuffer(target: BufferTarget, buffer: Buffer);
  glBindBuffer(target, buffer);
}
struct BufferUsage { val: Int = 0; }
func StaticDrawBufferUsage() -> BufferUsage { return BufferUsage(0x88E4); }
func set_data[T](target: BufferTarget, data: Vector[T], usage: BufferUsage) {
  extern_func glBufferData(target: BufferTarget, size: Int, data: Ptr[Float], usage: BufferUsage);
  glBufferData(target, 4 * data.size, data.start, usage);  # 4 bytes per Float.
}

extern_func glEnableVertexAttribArray(attrib_idx: Int);
extern_func glDisableVertexAttribArray(attrib_idx: Int);
struct AttribType { val: Int = 0; }
func FloatAttribType() -> AttribType { return AttribType(0x1406); }
extern_func glVertexAttribPointer(attrib_idx: Int, size: Int, attrib_type: AttribType, normalized: Bool, stride: Int, ptr: Ptr[Int]);
struct DrawMode { val: Int = 0; }
func TrianglesDrawMode() -> DrawMode { return DrawMode(0x0004); }
extern_func glDrawArrays(mode: DrawMode, first: Int, count: Int);
struct Capability { val: Int = 0; }
func Multisample() -> Capability { return Capability(0x809D); }
extern_func glEnable(cap: Capability);

struct PolygonMode { val: Int = 0; }
func LineMode() -> PolygonMode { return PolygonMode(0x1B01); }
func FillMode() -> PolygonMode { return PolygonMode(0x1B02); }
func PointMode() -> PolygonMode { return PolygonMode(0x1B00); }
func set_polygon_mode(mode: PolygonMode) {
  extern_func glPolygonMode(face: Int, mode: PolygonMode);
  front_and_back = 0x0408;
  glPolygonMode(front_and_back, mode);
}

struct ShaderType { val: Int = 0; }
func FragmentShaderType() -> ShaderType { return ShaderType(0x8B30); }
func VertexShaderType() -> ShaderType { return ShaderType(0x8B31); }
struct Shader { id: Int = 0; }
func create_shader(shader_type: ShaderType) -> Shader {
  extern_func glCreateShader(shader_type: ShaderType) -> Shader;
  return glCreateShader(shader_type);
}
func set_source(shader: Shader, shader_code: Str) {
  # string argument is actually of type CharCharPtr, which do not exist yet (use LongPtr + unsafe cast now: for).
  extern_func glShaderSource(shader: Shader, count: Int, string: Ptr[Long], length: Ptr[Int]);
  # as there is no reference operator yet, temporarily allocate some memory to obtain the string and length.
  code_ptr = allocate[Long](1);
  store(code_ptr, ToLong(shader_code.start));
  len_ptr = allocate[Int](1);
  store(len_ptr, shader_code.length);
  glShaderSource(shader, 1, code_ptr, len_ptr);
  deallocate(code_ptr);
  deallocate(len_ptr);
}
func compile(shader: Shader) {
  extern_func glCompileShader(shader: Shader);
  glCompileShader(shader);
}
struct ShaderParameter { val: Int = 0; }
func ShaderCompileStatus() -> ShaderParameter { return ShaderParameter(0x8B81); }
func ShaderInfoLogLength() -> ShaderParameter { return ShaderParameter(0x8B84); }
extern_func glGetShaderiv(shader: Shader, pname: ShaderParameter, params: Ptr[Int]);
struct CompileSuccess { }
struct CompileError { message: Str = ""; }
func print(status: CompileSuccess) { print("Compile Success"); }
func print(status: CompileError) { print("Compile Error:\n"); print(status.message); }
func get_compile_status(shader: Shader) -> CompileSuccess|CompileError {
  res = allocate[Int](1);
  glGetShaderiv(shader, ShaderCompileStatus(), res);
  success = ToBool(load(res));
  if success {
    deallocate(res);
    return CompileSuccess();
  } else {
    # get error message
    glGetShaderiv(shader, ShaderInfoLogLength(), res);
    log_length = load(res);
    log = EmptyStr(log_length);
    extern_func glGetShaderInfoLog(shader: Shader, max_length: Int, length: Ptr[Int], info_log: Ptr[Char]);
    glGetShaderInfoLog(shader, log.alloc_length, res, log.start);
    log.length = load(res);
    deallocate(res);
    return CompileError(log);
  }
}
func delete_shader(shader: Shader) {
  extern_func glDeleteShader(shader: Shader);
  glDeleteShader(shader);
}
struct ShaderProgram { id: Int = 0; }
func create_shader_program() -> ShaderProgram {
  extern_func glCreateProgram() -> ShaderProgram;
  return glCreateProgram();
}
func attach_shader(program: ShaderProgram, shader: Shader) {
  extern_func glAttachShader(program: ShaderProgram, shader: Shader);
  glAttachShader(program, shader);
}
func link(program: ShaderProgram) {
  extern_func glLinkProgram(program: ShaderProgram);
  glLinkProgram(program);
}
struct ShaderProgramParameter { val: Int = 0; }
func ShaderProgramLinkStatus() -> ShaderProgramParameter { return ShaderProgramParameter(0x8B82); }
func ShaderProgramInfoLogLength() -> ShaderProgramParameter { return ShaderProgramParameter(0x8B84); }
extern_func glGetProgramiv(shader: ShaderProgram, pname: ShaderProgramParameter, params: Ptr[Int]);
struct LinkSuccess { }
struct LinkError { message: Str = ""; }
func print(status: LinkSuccess) { print("Link Success"); }
func print(status: LinkError) { print("Link Error:\n"); print(status.message); }
func get_link_status(program: ShaderProgram) -> LinkSuccess|LinkError {
  res = allocate[Int](1);
  glGetProgramiv(program, ShaderProgramLinkStatus(), res);
  success = ToBool(load(res));
  if success {
    deallocate(res);
    return LinkSuccess();
  } else {
    # get error message
    glGetProgramiv(program, ShaderProgramInfoLogLength(), res);
    log_length = load(res);
    log = EmptyStr(log_length);
    extern_func glGetProgramInfoLog(program: ShaderProgram, max_length: Int, length: Ptr[Int], info_log: Ptr[Char]);
    glGetProgramInfoLog(program, log.alloc_length, res, log.start);
    log.length = load(res);
    deallocate(res);
    return LinkError(log);
  }
}
func detach_shader(program: ShaderProgram, shader: Shader) {
  extern_func glDetachShader(program: ShaderProgram, shader: Shader);
  glDetachShader(program, shader);
}
func use(program: ShaderProgram) {
  extern_func glUseProgram(program: ShaderProgram);
  glUseProgram(program);
}
struct UniformLocation { id: Int = 0; }
func get_uniform_location(program: ShaderProgram, uniform_name: Str) -> UniformLocation {
  extern_func glGetUniformLocation(program: ShaderProgram, name: Ptr[Char]) -> UniformLocation;
  uniform_name += '\0';
  uniform = glGetUniformLocation(program, uniform_name.start);
  assert(uniform.id != -1, "Cannot get uniform " + uniform_name);  # error code.
  free(uniform_name);
  return uniform;
}
func set_uniform(location: UniformLocation, data: Vector[Float]) {
  # Sleepy does not support else if yet.
  if data.size == 1 {
    extern_func glUniform1f(location: UniformLocation, v0: Float);
    glUniform1f(location, +data[0]);
    return;
  } if data.size == 2 {
    extern_func glUniform2f(location: UniformLocation, v0: Float, v1: Float);
    glUniform2f(location, +data[0], +data[1]);
    return;
  } if data.size == 3 {
    extern_func glUniform3f(location: UniformLocation, v0: Float, v1: Float, v2: Float);
    glUniform3f(location, +data[0], +data[1], +data[2]);
    return;
   }
   assert(False(), "Not supported yet");
}
func set_uniform(location: UniformLocation, data: Matrix) {
  if and(data.dim_x == 2, data.dim_y == 2) {
    extern_func glUniformMatrix2fv(location: UniformLocation, count: Int, transpose: Bool, value: Ptr[Float]);
    glUniformMatrix2fv(location, 1, False(), data.start);
    return;
  } if and(data.dim_x == 3, data.dim_y == 3) {
    extern_func glUniformMatrix3fv(location: UniformLocation, count: Int, transpose: Bool, value: Ptr[Float]);
    glUniformMatrix3fv(location, 1, False(), data.start);
    return;
  } if and(data.dim_x == 4, data.dim_y == 4) {
    extern_func glUniformMatrix4fv(location: UniformLocation, count: Int, transpose: Bool, value: Ptr[Float]);
    glUniformMatrix4fv(location, 1, False(), data.start);
    return;
  }
  assert(False(), "Not supported yet");
}

func terminate(error: Str) {
  print("Error happened: ");
  print_line(error);
  glfwTerminate();
  assert(False());
}

func make_triangle() -> Vector[Float] {
  data = ZeroVector[Float](9);
  data[0] = -0.8f; data[1] = -0.8f;
  data[3] = 0.8f;  data[4] = -0.8f;
                   data[7] = 0.8f;
  print_line(data);
  return data;
}
func make_cube() -> Vector[Float] {
  num_triangles = 2 * 2 * 3;
  data = ZeroVector[Float](9 * num_triangles);
  data_pos = 0;
  normal_axis = 0;  # axis in which normal faces
  while normal_axis < 3 {
    normal_dir = 0.0f;  # sign of normal
    while normal_dir < 2.0f {
      #
      # p3 x---x p2
      #    |  /|
      #    | / |
      #    |/  |
      # p0 x---x p1
      #
      other_axis0 = mod(normal_axis + 1, 3);
      other_axis1 = mod(normal_axis + 2, 3);
      # p0 -> p2 -> p1
      data[data_pos + normal_axis] = normal_dir;
      data[data_pos + other_axis0] = 0.0f;
      data[data_pos + other_axis1] = 0.0f;
      data_pos += 3;
      data[data_pos + normal_axis] = normal_dir;
      data[data_pos + other_axis0] = 1.0f;
      data[data_pos + other_axis1] = 1.0f;
      data_pos += 3;
      data[data_pos + normal_axis] = normal_dir;
      data[data_pos + other_axis0] = 1.0f;
      data[data_pos + other_axis1] = 0.0f;
      data_pos += 3;
      # p0 -> p3 -> p2
      data[data_pos + normal_axis] = normal_dir;
      data[data_pos + other_axis0] = 0.0f;
      data[data_pos + other_axis1] = 0.0f;
      data_pos += 3;
      data[data_pos + normal_axis] = normal_dir;
      data[data_pos + other_axis0] = 0.0f;
      data[data_pos + other_axis1] = 1.0f;
      data_pos += 3;
      data[data_pos + normal_axis] = normal_dir;
      data[data_pos + other_axis0] = 1.0f;
      data[data_pos + other_axis1] = 1.0f;
      data_pos += 3;
      normal_dir += 1.0f;
    }
    normal_axis += 1;
  }
  return data;
}

func reload(program: ShaderProgram, vertex_shader_path: Str, fragment_shader_path: Str) {
  vertex_shader_code = read_file(vertex_shader_path);
  fragment_shader_code = read_file(fragment_shader_path);
  vertex_shader = create_shader(VertexShaderType());
  fragment_shader = create_shader(FragmentShaderType());
  set_source(vertex_shader, vertex_shader_code);
  set_source(fragment_shader, fragment_shader_code);
  compile(vertex_shader);
  compile(fragment_shader);
  if not(and(get_compile_status(vertex_shader) is CompileSuccess, get_compile_status(fragment_shader) is CompileSuccess)) {
    #print_line(get_compile_status(vertex_shader));
    #print_line(get_compile_status(fragment_shader));
  }

  attach_shader(program, vertex_shader);
  attach_shader(program, fragment_shader);
  link(program);
  link_status = get_link_status(program);
  if not(link_status is LinkSuccess) {
    assert(link_status is LinkError);
    print_line(link_status);
  }
  detach_shader(program, vertex_shader);
  detach_shader(program, fragment_shader);
  delete_shader(vertex_shader);
  delete_shader(fragment_shader);
}
func make_program(vertex_shader_path: Str, fragment_shader_path: Str) -> ShaderProgram {
  program = create_shader_program();
  reload(program, vertex_shader_path, fragment_shader_path);
  return program;
}

func main() {
  if glfwInit() != 1 {
    print_line("Init error");
    assert(False());
  }

  set_samples(4);

  fullscreen = False();
  monitor = NullGLFWMonitor();
  if fullscreen { monitor = glfwGetPrimaryMonitor(); }
  window: GLFWWindow = glfwCreateWindow(640, 480, "Hello, World!\0".start, monitor, NullGLFWWindow());
  if window == NullGLFWWindow() { terminate("Could not make window"); }

  make_current_context(window);
  set_sticky_keys(window, True());
  glClearColor(0.2f, 0.8f, 0.2f, 0.0f);
  glEnable(Multisample());

  vertex_array = generate_vertex_array();
  bind(vertex_array);
  vertex_buffer = generate_buffer();
  bind(ArrayBufferTarget(), vertex_buffer);
  mesh = make_cube();
  set_data(ArrayBufferTarget(), mesh, StaticDrawBufferUsage());

  func translate_and_scale(translate_x: Float, translate_y: Float, translate_z: Float, scale_x: Float, scale_y: Float, scale_z: Float) -> Matrix {
    scale = Vector3(translate_x, translate_y, translate_z);
    translate = Vector3(scale_x, scale_y, scale_z);
    projection = dot(TranslateMatrix(translate), ScaleMatrix(scale));
    return projection;
  }

  vertex_shader_path = "shaders/vertex.glsl";
  fragment_shader_path = "shaders/fragment.glsl";
  program = make_program(vertex_shader_path, fragment_shader_path);
  projection_uniform = get_uniform_location(program, "projection");
  projection = translate_and_scale(0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f);

  time = 0.0f;

  while not(or(should_close(window), glfwGetKey(window, EscapeKey()) == KeyPress())) {
    time += 0.1f * 0.1f;
    clear(or(ColorBufferBit(), DepthBufferBit()));

    use(program);
    glEnableVertexAttribArray(0);
    bind(ArrayBufferTarget(), vertex_buffer);
    glVertexAttribPointer(0, 3, FloatAttribType(), False(), 0, NullPtr[Int]());

    projection = translate_and_scale(cos(time), sin(time), 0.0f, 0.5f, 0.5f, 1.0f);
    set_uniform(projection_uniform, projection);
    set_polygon_mode(LineMode());
    glDrawArrays(TrianglesDrawMode(), 0, div(mesh.size, 3));
    glDisableVertexAttribArray(0);

    swap_buffers(window);
    glfwPollEvents();
  }

  destroy(window);
  print_line("Goodbye.");
  glfwTerminate();
}
