# pointer that will automatically be freed when out-of-scope
# TODO: implement that cleanup will be called once things leave scope
struct OwnedPtr[T] {
  value: Ptr[T];
}
func cleanup[T](ptr: OwnedPtr[T]) {
  free(ptr.value);
}
func new[T](val: T) -> OwnedPtr[T] {
  ptr = allocate[T](1);
  store(ptr, val);
  return OwnedPtr(ptr);
}

func cleanup[T](ptr: Ptr[T]) {
  # does nothing
}

struct List[T] {
  start: OwnedPtr[T];
  allocated_size: Long;
  size: Long;
}

func EmptyList[T]() -> List[T] {
  initial_size = 4l;
  ptr = allocate[T](initial_size);  # currently list are always allocated on the heap.
  return List[T](OwnedPtr(ptr), initial_size, 0l);
}

func maybe_resize[T](mutates list: List[T], required_size: Long) {
  if list.allocated_size >= required_size { return; }
  list.allocated_size = max(required_size, list.allocated_size * 2l);
  old_start = list.start;
  list.start = OwnedPtr(allocate[T](list.allocated_size));
  memcpy(list.start.value, old_start.value, list.size);
  deallocate(old_start.value);
}

func add[T](mutates list: List[T], value: T) {
  maybe_resize(list, list.size + 1l);
  store(list.start.value + list.size, value);
  list.size += 1l;
}
func index[T](list: List[T], i: Long) -> Ptr[T] {
  assert(and(0l <= i, i < list.size));
  return list.start.value + i;
}
func index[T](list: List[T], i: Int) -> Ptr[T] { return index(list, ToLong(i)); }
func pop[T](mutates list: List[T]) -> T {
  assert(list.size > 0l);
  value = load(list[list.size - 1l]);
  list.size -= 1l;
  return value;
}
func remove_all[T](mutates list: List[T]) {
  pos = 0l;
  while pos < list.size {
    cleanup(list[pos]);
    pos += 1l;
  }
  list.size = 0l;
}
func cleanup[T](mutates list: List[T]) {
  remove_all(list);
  cleanup(list.start);
}

func print[T](list: List[T]) {
  print('[');
  pos = 0l;
  while pos < list.size {
    print(load(list[pos]));
    pos += 1l;
    if pos < list.size { print(','); print(' '); }
  }
  print(']');
}

func main() {
  a = EmptyList[Double]();
  val = 0l;
  while val < 10l {
    add(a, ToDouble(val));
    val += 1l;
  }
  a[0] = -5.0;
  print_line(a);
  assert(a.size == 10l);
  print_line(pop(a));
  print_line(a);
  assert(a.size == 9l);
  remove_all(a);
  assert(a.size == 0l);
  cleanup(a);
}