# pointer that will automatically be freed when out-of-scope
# TODO: implement that cleanup will be called once things leave scope
struct OwnedPtr[T] {
  value: Ptr[T];
}
func cleanup[T](ptr: OwnedPtr[T]) {
  free(ptr.value);
}
func cleanup(str: Str|Double) { }
func cleanup[T](ptr: Ptr[T]) { }

struct List[T] {
  start: OwnedPtr[T];
  allocated_size: Long;
  size: Long;
}

func EmptyList[T]() -> List[T] {
  initial_size = 4l;
  ptr = allocate[T](initial_size);  # currently list are always allocated on the heap.
  return List[T](OwnedPtr(ptr), initial_size, 0l);
}

func maybe_resize[T](mutates list: List[T], required_size: Long) {
  if list.allocated_size >= required_size { return; }
  list.allocated_size = max(required_size, list.allocated_size * 2l);
  old_start = list.start;
  list.start = OwnedPtr(allocate[T](list.allocated_size));
  memcpy(list.start.value, old_start.value, list.size);
  deallocate(old_start.value);
}

func add[T](mutates list: List[T], value: T) {
  maybe_resize(list, list.size + 1l);
  store(list.start.value + list.size, value);
  list.size += 1l;
}
func add_all[T](mutates list: List[T], others: List[T]) {
  maybe_resize(list, list.size + others.size);
  i = 0l;
  while i < others.size {
    store(list.start.value + list.size + i, others[i]);
    i += 1l;
  }
  list.size += others.size;
}
func index[T](list: List[T], i: Long) -> Ref[T] {
  assert(and(0l <= i, i < list.size));
  return !load(list.start.value + i);
}
func index[T](list: List[T], i: Int) -> Ref[T] { return !index(list, ToLong(i)); }
func pop[T](mutates list: List[T]) -> T {
  assert(list.size > 0l);
  value = list[list.size - 1l];
  list.size -= 1l;
  return value;
}
func remove_all[T](mutates list: List[T]) {
  pos = 0l;
  while pos < list.size {
    cleanup(list[pos]);
    pos += 1l;
  }
  list.size = 0l;
}
func cleanup[T](mutates list: List[T]) {
  remove_all(list);
  cleanup(list.start);
}

func print[T](list: List[T]) {
  print('[');
  pos = 0l;
  while pos < list.size {
    print(list[pos]);
    pos += 1l;
    if pos < list.size { print(','); print(' '); }
  }
  print(']');
}

func swap[T](a: Ref[T], b: Ref[T]) {
  tmp: T = a;
  a = b;
  b = tmp;
}
func quicksort[T](mutates list: List[T]) {
  _quicksort(list, 0l, list.size - 1l);
}
func _quicksort[T](mutates list: List[T], from: Long, to: Long) {
  if from >= to { return; }
  pivot = from;
  pivot_val = list[pivot];
  i = from + 1l;
  j = to;
  assert(and(0l <= i, i <= j, j <= list.size - 1l));
  # goal: [< pivot] pivot [>= pivot]
  while i < j {
    while and(i < to, list[i] < pivot_val) { i += 1l; }
    while and(j > from, list[j] >= pivot_val) { j -= 1l; }
    if i < j { swap(!list[i], !list[j]); }
  }

  if list[j] < pivot_val { swap(!list[j], !list[pivot]); }
  pivot = j;

  _quicksort(list, from, pivot - 1l);
  _quicksort(list, pivot + 1l, to);
}

func is_sorted[T](list: List[T]) -> Bool {
  i = 1l;
  while i < list.size {
    if list[i - 1l] > list[i] { return False(); }
    i += 1l;
  }
  return True();
}

func +[T](a: List[T], b: List[T]) -> Ref[List[T]] {
  !c = !new(EmptyList[T]());
  add_all(c, a);
  add_all(c, b);
  return !c;
}

func main() {
  a = EmptyList[Double]();
  val = 10l;
  while a.size < 10l {
    add(a, ToDouble(val));
    val -= 1l;
  }
  a[0] = -5.0;
  print_line(a);
  assert(a.size == 10l);
  print_line(pop(a));
  print_line(a);
  assert(a.size == 9l);
  assert(not(is_sorted(a)));
  quicksort(a);
  print_line(a);
  assert(a.size == 9l);
  assert(is_sorted(a));

  # now: try a list on the heap!
  !b = !new(EmptyList[Double]());
  add(b, 123.1);  # can be used just as if it were on the stack
  print_line(a + b);  # would also need to call cleanup for a + b

  cleanup(b);
  delete(!b);
  cleanup(a);
}
