struct Unbounded { }
struct Slice {
  from : Int|Unbounded = 0; to : Int|Unbounded = 0;
}
func SliceFrom(from: Int) ->  Slice  {
  return Slice(from, Unbounded());
}
func SliceTo(to: Int) ->  Slice  {
  return Slice(Unbounded(), to);
}
func SliceAll() ->  Slice  {
  return Slice(Unbounded(), Unbounded());
}
func normalized_index(index: Int, length: Int) ->  Int  {
  if index < 0 { index += length; }
  assert(and(0 <= index, index < length));
  return index;
}
func normalized_from_index(index: Int|Unbounded, length: Int) ->  Int  {
  if index is Unbounded { index = 0; }
  if index < 0 { index += length; }
  assert(and(0 <= index, index <= length));
  return index;
}
func normalized_to_index(index: Int|Unbounded, length: Int) ->  Int  {
  if index is Unbounded { index = length; }
  if index < 0 { index += length; }
  assert(and(0 <= index, index <= length));
  return index;
}

# Variable dimensional vector
@RefType struct Vec {
  dim : Int;
  start : Ptr[Double];
}
func get(vec: Vec, pos: Int) -> Ptr[Double] {
  pos = normalized_index(pos, vec.dim);
  return vec.start + pos;
}
func set(@Mutable vec: Vec, pos: Int, val: Double)  {
  pos = normalized_index(pos, vec.dim);
  store(vec.start + pos, val);
}
func set(@Mutable vec: Vec, slice: Slice, val: Double)  {
  pos = normalized_from_index(slice.from, vec.dim);
  while pos < normalized_to_index(slice.to, vec.dim) {
    vec[pos] = val;
    pos += 1;
  }
}
func ZeroVec(dim: Int) -> @Mutable  Vec  {
  @Mutable v = Vec(dim, allocate_double(dim));
  set(v, SliceAll(), 0.0);
  return v;
}
func RandomVec(dim: Int) -> @Mutable  Vec  {
  @Mutable res = ZeroVec(dim);
  pos = 0;
  while pos < res.dim {
    res[pos] = random(-1.0, 1.0);
    pos += 1;
  }
  return res;
}
func *(scale: Double, vec: Vec) -> @Mutable  Vec  {
  @Mutable res = ZeroVec(vec.dim);
  pos = 0;
  while pos < vec.dim {
    res[pos] = scale * +vec[pos];
    pos += 1;
  }
  return res;
}
func +(a: Vec, b: Vec) -> @Mutable  Vec  {
  assert(a.dim == b.dim);
  @Mutable res = ZeroVec(a.dim);
  pos = 0;
  while pos < res.dim {
    res[pos] = +a[pos] + +b[pos];
    pos += 1;
  }
  return res;
}
func *(a: Vec, b: Vec) ->  Double  {  # dot product
  assert(a.dim == b.dim);
  res = 0.0;
  pos = 0;
  while pos < a.dim {
    res += +a[pos] * +b[pos];
    pos += 1;
  }
  return res;
}
func print(vec: Vec)  {
  print('[');
  pos = 0;
  while pos < vec.dim {
    print(+vec[pos]);
    if pos != vec.dim - 1 {
      print(", ");
    }
    pos += 1;
  }
  print(']');
}
func free_vec(vec: Vec)  {
  deallocate(vec.start);
  free(vec);
}

# Matrix implementation
@RefType struct Mat {
  num_rows : Int = 0;
  num_cols : Int = 0;
  start : Ptr[Double] = allocate_double(0);
}
func get(mat: Mat, row: Int, col: Int) -> Ptr[Double]  {
  row = normalized_index(row, mat.num_rows);
  col = normalized_index(col, mat.num_cols);
  return mat.start + row * mat.num_cols + col;
}
func get(mat: Mat, row: Int) -> @Mutable  Vec  {
  @Mutable row_vec = ZeroVec(mat.num_cols);
  col = 0;
  while col < mat.num_cols {
    row_vec[col] = +mat[row, col];
    col += 1;
  }
  return row_vec;
}
func set(@Mutable mat: Mat, row: Int, col: Int, val: Double)  {
  assert(and(0 <= row, row < mat.num_rows));
  assert(and(0 <= col, col < mat.num_cols));
  store(mat.start + row * mat.num_cols + col, val);
}
func set(@Mutable mat: Mat, row: Int, row_vec: Vec)  {
  assert(and(0 <= row, row < mat.num_rows));
  assert(row_vec.dim == mat.num_cols);
  memcpy(mat.start + row * mat.num_cols, row_vec.start, row_vec.dim * 8);
}
func set(@Mutable mat: Mat, row_slice: Slice, col_slice: Slice, val: Double)  {
  row = normalized_from_index(row_slice.from, mat.num_rows);
  while row < normalized_to_index(row_slice.to, mat.num_rows) {
    col = normalized_from_index(col_slice.from, mat.num_cols);
    while col < normalized_to_index(col_slice.to, mat.num_cols) {
      mat[row, col] = val;
      col += 1;
    }
    row += 1;
  }
}
func ZeroMat(num_rows: Int, num_cols: Int) -> @Mutable  Mat  {
  @Mutable mat = Mat(num_rows, num_cols, allocate_double(num_rows * num_cols * 8));
  set(mat, SliceAll(), SliceAll(), 0.0);
  return mat;
}
func RandomMat(num_rows: Int, num_cols: Int) -> @Mutable  Mat  {
  @Mutable mat = ZeroMat(num_rows, num_cols);
  row = 0;
  while row < num_rows {
    col = 0;
    while col < num_cols {
      mat[row, col] = random(-1.0, 1.0);
      col += 1;
    }
    row += 1;
  }
  return mat;
}
func free_mat(mat: Mat)  {
  deallocate(mat.start);
  free(mat);
}

func main()  {
  # training data: try to learn signum(sum of features).
  func make_sample_labels(x: Mat) ->  Vec  {
    @Mutable y = ZeroVec(x.num_rows);
    sample = 0;
    while sample < x.num_rows {
      feature_sum = 0.0;
      feature = 0;
      while feature < x.num_cols {
        feature_sum += +x[sample, feature];
        feature += 1;
      }
      y[sample] = sign(feature_sum);
      sample += 1;
    }
    return y;
  }
  num_samples = 300;
  feature_dim = 1;
  samples_x = RandomMat(num_samples, feature_dim);
  samples_y = make_sample_labels(samples_x);
  epsilon = 0.01;

  # model weights
  set_random_seed(42);
  weights = RandomVec(feature_dim);
  bias = random(-1.0, 1.0);

  it = 0;
  max_it = 300;
  learning_rate = 1.0;
  print_line("Training model ...");
  while it < max_it {
    sample = random_int(0, num_samples);
    x = samples_x[sample];
    y = +samples_y[sample];

    likelihood = weights * x + bias;
    if y * likelihood < epsilon {
      # update weights.
      weights += learning_rate * y * x;
      bias += learning_rate * y;
    }

    print("Step "); print(it + 1); print('/'); print(max_it); print_line();
    it += 1;
  }

  func predict(weights: Vec, bias: Double, x: Vec) ->  Double  {
    likelihood = weights * x + bias;
    return sign(likelihood);
  }
  @Mutable test = ZeroVec(feature_dim);
  test[0] = -4.0;
  print_line(predict(weights, bias, test));
  print("The fitted hyperplane is "); print(weights); print(" * x + "); print(bias); print_line();
}
