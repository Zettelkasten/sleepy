func main()  {
  my_int: Int = 21;
  my_double: Double = 4.0;
  prod: Double = my_double * my_double;
  print(prod);
  print('\n');
  sum = my_double + my_double;  # also implicitly a Double
  print(sum);
  print('\n');
  int_calc = my_int * 34;

  @RefType
  struct IntPair {
    left: Int = 0;
    right: Int = 0;
  }

  @Inline func get_left(pair: IntPair) ->  Int  {
    return pair.left;
  }
  @Inline func set_left(pair: IntPair, new_left: Int)  {
    pair.left = new_left;
  }

  func print(pair: IntPair)  {
    print('(');
    print(pair.left);
    print('|');
    print(pair.right);
    print(')');
  }

  p: IntPair = IntPair(4, -3);
  print_line(get_left(p));
  # set_left(p, 6) would fail, as p is immutable!
  mutable_pair = IntPair(6, 9);
  set_left(mutable_pair, 53);  # this works however.
  print_line(get_left(mutable_pair));  # and orints 53.
  print(mutable_pair);
  print_line();
  free(p); free(mutable_pair);
}
